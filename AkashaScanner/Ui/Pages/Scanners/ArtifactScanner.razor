@inherits RazorComponent
@page "/scanners/artifact"

@using Core.DataCollections
@using Core.Scappers

@inject IConfig ScrapConfig
@inject IArtifactCollection ArtifactCollection
@inject ICharacterCollection CharacterCollection
@inject IScrapper<IArtifactConfig> ArtifactScrapper

<Scanner Model="@Data" Enabled="@Enabled" OnSubmit="@HandleSubmit">
    <Instructions>
        <li>Update game data below if needed.</li>
        <li>Fill in the options below.</li>
        <li>Start the game. Game is currently <ProcessStatusDisplay />.</li>
        <li>Open the inventory. Select the <b>"Artifacts"</b> tab.</li>
        <li>Sort items in <b>descending</b> order.</li>
        <li>Scroll to the top so that the first row is completely visible.</li>
        <li>Make sure the artifact's name on the right side is fully visible as well.</li>
        <li>Click the "Start" button below to start scanning. Please do not move the mouse or press any buttons.</li>
        <li>If you wish to interrupt the scan, minimize or exit the game (using Alt+Tab).</li>
    </Instructions>
    <DataUpdates>
        <DataUpdate Title="Artifacts" Collection="@ArtifactCollection" Status="@ArtifactCollectionStatus" EntryType="@(typeof(ArtifactEntry))" />
        <DataUpdate Title="Characters" Collection="@CharacterCollection" Status="@CharacterCollectionStatus" EntryType="@(typeof(CharacterEntry))" />
    </DataUpdates>
    <Options>
        <Field Label="@TravelerNameLabel">
            <InputText class="input" DisplayName="@TravelerNameLabel" @bind-Value="Data.TravelerName" />
        </Field>
        <Field Label="@WandererNameLabel">
            <InputText class="input" DisplayName="@WandererNameLabel" @bind-Value="WandererName" />
        </Field>
        <Field Label="@MinLevelLabel">
            <InputNumber class="input" DisplayName="@MinLevelLabel" @bind-Value="Data.ArtifactMinLevel" />
        </Field>
        <Field Label="@MinRarityLabel">
            <InputNumber class="input" DisplayName="@MinRarityLabel" @bind-Value="Data.ArtifactMinRarity" />
        </Field>
    </Options>
</Scanner>

@code {
    private const string TravelerNameLabel = "Traveler's Name";
    private const string WandererNameLabel = "Wanderer's Name";
    private const string MinLevelLabel = "Minimum Level";
    private const string MinRarityLabel = "Minimum Rarity";

    private IArtifactConfig Data = new DefaultFormData();

    [Flux.GetDataCollectionStatus(typeof(ArtifactEntry))]
    public Flux.DataCollectionStatus ArtifactCollectionStatus { get; set; } = default!;

    [Flux.GetDataCollectionStatus(typeof(CharacterEntry))]
    public Flux.DataCollectionStatus CharacterCollectionStatus { get; set; } = default!;

    [Flux.GetProcessStatus]
    public ProcessStatus Status { get; set; }
    
    private string WandererName { get => ScrapConfig.getCharacterNameOverride("Wanderer"); set => ScrapConfig.setCharacterNameOverride("Wanderer", value); }

    public bool Enabled => ArtifactCollectionStatus.IsAvailable && CharacterCollectionStatus.IsAvailable;

    protected override async Task OnInitializedAsync()
    {
        Initialize();
        await ScrapConfig.Load();
        Data = new FormData(ScrapConfig);
    }

    public bool HandleSubmit()
    {
        ScrapConfig.Save();
        return ArtifactScrapper.Start(Data);
    }

    public override void Dispose()
    {
        base.Dispose();
        ArtifactScrapper.Dispose();
    }

    private class FormData : IArtifactConfig
    {
        private readonly IArtifactConfig ScrapConfig;

        public FormData(IArtifactConfig scrapConfig)
        {
            ScrapConfig = scrapConfig;
        }

        [Display(Name = TravelerNameLabel)]
        [Required]
        public string TravelerName { get => ScrapConfig.TravelerName; set => ScrapConfig.TravelerName = value; }

        [Display(Name = WandererNameLabel)]
        public Dictionary<string, string> CharacterNameOverrides { get => ScrapConfig.CharacterNameOverrides; set => ScrapConfig.CharacterNameOverrides = value; }

        [Display(Name = MinLevelLabel)]
        [Required]
        [Range(0, 20)]
        public int ArtifactMinLevel { get => ScrapConfig.ArtifactMinLevel; set => ScrapConfig.ArtifactMinLevel = value; }

        [Display(Name = MinRarityLabel)]
        [Required]
        [Range(1, 5)]
        public int ArtifactMinRarity { get => ScrapConfig.ArtifactMinRarity; set => ScrapConfig.ArtifactMinRarity = value; }
    }

    private class DefaultFormData : IArtifactConfig
    {
        public string TravelerName { get; set; } = string.Empty;
        public Dictionary<string, string> CharacterNameOverrides { get; set; } = new();
        public int ArtifactMinLevel { get; set; }
        public int ArtifactMinRarity { get; set; }
    }
}
